package frc.robot;

import edu.wpi.first.math.MathUtil;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.Apriltag.FieldTX;
import frc.robot.Apriltag.LimelightSubsystem;
import frc.robot.Apriltag.Smartshoot;
import frc.robot.Constants.OIConstants;
import frc.robot.Limelight.Vition.Vition;
import frc.robot.commands.Aim;
import frc.robot.commands.climberCommand;
import frc.robot.commands.intakeCommand;
import frc.robot.commands.shootFr;
import frc.robot.commands.shootPID;
import frc.robot.commands.shootbk;
import frc.robot.commands.shooterCommand;
import frc.robot.commands.shootershaftCommand;
import frc.robot.commands.shootershafttest;
import frc.robot.subsystems.SwerveSubsystem;
import frc.robot.subsystems.climberSubsystem;
import frc.robot.subsystems.intakeSubsystem;
import frc.robot.subsystems.shooterSubsystem;
import frc.robot.subsystems.shootershaftSubsystem;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.RunCommand;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;

import com.pathplanner.lib.auto.NamedCommands;
import com.pathplanner.lib.commands.PathPlannerAuto;

public class RobotContainer {
    public static int a;
    // 機器人的子系統
    private final SwerveSubsystem m_SwerveSubsystem = new SwerveSubsystem();
    private final LimelightSubsystem m_LimelightSubsystem = new LimelightSubsystem();
    private final Vition m_Vition = new Vition(m_SwerveSubsystem, m_LimelightSubsystem);
    private final shooterSubsystem m_ShooterSubsystem = new shooterSubsystem();
    private final shootershaftSubsystem m_ShootershaftSubsystem = new shootershaftSubsystem();
    private final intakeSubsystem m_IntakeSubsystem = new intakeSubsystem();
    private final climberSubsystem m_ClimberSubsystem = new climberSubsystem();
    private final shootbk m_Shootbk = new shootbk(m_ShooterSubsystem, 1);
    private final intakeCommand m_IntakeCommand = new
    intakeCommand(m_IntakeSubsystem, 0.7, m_ShooterSubsystem, 0.05);
    private final shooterCommand m_ShooterCommand = new shooterCommand(m_ShooterSubsystem, 0.4, 0.5, 0.4);
    // private final FieldTXSubsystem m_FieldTXSubsystem = new FieldTXSubsystem();
    // 駕駛員的控制器
    public static XboxController m_driverController = new XboxController(1);
    public static Joystick joystick = new Joystick(0);
    SendableChooser<String> m_Chooser = new SendableChooser<>();

    /**
     * 機器人的容器。包含子系統、OI 設備和命令。
     */
    public RobotContainer() {
        NamedCommands.registerCommand("intakecurl",
                new intakeCommand(m_IntakeSubsystem, 1, m_ShooterSubsystem, 0).withTimeout(1.25));
        NamedCommands.registerCommand("intakeshaft",
                new shootershaftCommand(m_ShootershaftSubsystem, 79));
        NamedCommands.registerCommand("go",
                new shooterCommand(m_ShooterSubsystem, 1, 0.8, 0.9).withTimeout(1));
        NamedCommands.registerCommand("speakerfrshoot",
                new shootershaftCommand(m_ShootershaftSubsystem, 52));
        NamedCommands.registerCommand("speakershoot2",
                new shootershaftCommand(m_ShootershaftSubsystem, 41));
        NamedCommands.registerCommand("speakershoot3",
                new shootershaftCommand(m_ShootershaftSubsystem, 35));
        NamedCommands.registerCommand("speakershoot8",
                new shootershaftCommand(m_ShootershaftSubsystem, 36));
        NamedCommands.registerCommand("speakershoot4",
                new shootershaftCommand(m_ShootershaftSubsystem, 37.5));
        NamedCommands.registerCommand("speakershoot5",
                new shootershaftCommand(m_ShootershaftSubsystem, 36.7));
        NamedCommands.registerCommand("speakershoot6",
                new shootershaftCommand(m_ShootershaftSubsystem, 30));
        NamedCommands.registerCommand("First shoot",
                new shooterCommand(m_ShooterSubsystem, 1, 1, 1).withTimeout(0.6));
        NamedCommands.registerCommand("shootFR",
                new shootFr(m_ShooterSubsystem, 0.6, 0.6, m_Shootbk));
        NamedCommands.registerCommand("shootbk",
                new shootbk(m_ShooterSubsystem, 0.5));
        NamedCommands.registerCommand("Slow shoot",
                new Aim(m_ShooterSubsystem, 500, 1, 2000).withTimeout(0.5));
        // 配置按鈕綁定
        configureButtonBindings();
        // 配置默認命令
        m_SwerveSubsystem.setDefaultCommand(
                // 左搖桿控制機器人的平移。
                // 轉向由右搖桿的 X 軸控制。
                new RunCommand(
                        () -> m_SwerveSubsystem.drive(
                                -MathUtil.applyDeadband(m_driverController.getLeftY()
                                        * Constants.drive.kForwardspeed,
                                        OIConstants.kDriveDeadband),
                                -MathUtil.applyDeadband(m_driverController.getLeftX()
                                        * Constants.drive.klateralspeed,
                                        OIConstants.kDriveDeadband),
                                -MathUtil.applyDeadband(m_driverController.getRightX()
                                        * Constants.drive.krotspeed,
                                        OIConstants.kDriveDeadband),
                                true, true),
                        m_SwerveSubsystem));
        m_Chooser.addOption("middile and stage note", "middile and stage note");
        m_Chooser.addOption("middile and Amp note", "middile and Amp note");
        m_Chooser.addOption("shoot one and back", "shoot one");
        m_Chooser.addOption("only take one", "only take one");
        m_Chooser.addOption("Test", "Test");
        m_Chooser.addOption("New Auto", "New Auto");
        m_Chooser.addOption("Rob", "TTT");
        m_Chooser.addOption("new test", "New New Auto");
        m_Chooser.addOption("just shoot", "just shoot");
        m_Chooser.addOption("Amp side", "Amp side");
        m_Chooser.addOption("pratice side", "pratice side");
        m_Chooser.addOption("hz test", "hz test");
        SmartDashboard.putData("AutonomousPathChoose", m_Chooser);
    }

    public void update() {
        m_SwerveSubsystem.update();
    }

    /**
     * 使用此方法定義您的按鈕->命令映射。按鈕可以通過
     * 實例化 {@link edu.wpi.first.wpilibj.GenericHID} 或其
     * 子類之一（{@link edu.wpi.first.wpilibj.Joystick} 或 {@link XboxController}），
     * 然後通過傳遞給 {@link JoystickButton}。
     */
    private void configureButtonBindings() {
        // m_ShooterSubsystem.setDefaultCommand(m_ShooterCommand);
        // this methond :: GyroReset Button
        new JoystickButton(m_driverController, 4)
                .whileTrue(new RunCommand(
                        () -> m_SwerveSubsystem.zeroHeading(),
                        m_SwerveSubsystem));
        new JoystickButton(m_driverController, 2)
                .whileTrue(new RunCommand(
                        () -> m_SwerveSubsystem.RotationToSpeaker(150), // 150
                        m_SwerveSubsystem));
        new JoystickButton(m_driverController, 5)
                .whileTrue(new FieldTX(m_SwerveSubsystem, m_Vition));
        new JoystickButton(m_driverController, 1)
                .whileTrue(new shootershaftCommand(
                        m_ShootershaftSubsystem, 22.5));

        // this methond :: GyroReset Button
        // new JoystickButton(m_driverController, 9427)
        // .whileTrue(new RunCommand(
        // () -> m_SwerveSubsystem.followPathCommand("Source to Amp"),
        // m_SwerveSubsystem));
        // this methond :: shootershoot Button
        new JoystickButton(joystick, 4)
                .whileTrue(new Smartshoot(m_Vition, m_ShootershaftSubsystem));
        new JoystickButton(joystick, 1)
                .whileTrue(new shootPID(
                        m_ShooterSubsystem));
        new JoystickButton(joystick, 3)
                .whileTrue(new Aim(
                        m_ShooterSubsystem, 500, 0.25, 1400));
        new JoystickButton(joystick, 2)
                .whileTrue(new intakeCommand(
                        m_IntakeSubsystem, 0.7, m_ShooterSubsystem, 0.05));
        new JoystickButton(joystick, 11)
                .whileTrue(new intakeCommand(
                        m_IntakeSubsystem, -1, m_ShooterSubsystem, -0.05));
        new JoystickButton(joystick, 9)
                .whileTrue(new climberCommand(
                        m_ClimberSubsystem, 0.5));
        new JoystickButton(joystick, 10)
                .whileTrue(new climberCommand(
                        m_ClimberSubsystem, -0.5));

        // new JoystickButton(m_driverController, 5)
        // .onTrue(new FieldTX(
        // m_SwerveSubsystem, m_FieldTXSubsystem));
        // this methond :: Fiedshoot Button
        // this methond :: shaftUp Button
        // this methond :: shaftdown Button
        new JoystickButton(m_driverController, 3)
                .whileTrue(new shootershafttest(
                        m_ShootershaftSubsystem, -0.3));
        new JoystickButton(joystick, 12)
                .whileTrue(new shootershaftCommand(
                        m_ShootershaftSubsystem, 79));
        new JoystickButton(joystick, 5)
                .whileTrue(new shootershaftCommand(
                        m_ShootershaftSubsystem, 56.5));
        new JoystickButton(joystick, 8)
                .whileTrue(new shootershaftCommand(
                        m_ShootershaftSubsystem, 52));
        new JoystickButton(joystick, 7)
                .whileTrue(new shootershaftCommand(
                        m_ShootershaftSubsystem, 38));
        new JoystickButton(m_driverController, 6)
                .whileTrue(new RunCommand(
                        () -> m_SwerveSubsystem.drive(
                                -MathUtil.applyDeadband(m_driverController.getLeftY()
                                        * Constants.drive.kForwardSlowspeed,
                                        OIConstants.kDriveDeadband),
                                -MathUtil.applyDeadband(m_driverController.getLeftX()
                                        * Constants.drive.klateralSlowspeed,
                                        OIConstants.kDriveDeadband),
                                -MathUtil.applyDeadband(m_driverController.getRightX()
                                        * Constants.drive.krotSlowspeed,
                                        OIConstants.kDriveDeadband),
                                true, true),
                        m_SwerveSubsystem));
    }

    /**
     * 使用此方法將自主命令傳遞給主 {@link Robot} 類。
     *
     * @return 在自主模式運行的命令
     */
    public Command getAutonomousCommand() {
        return new PathPlannerAuto(m_Chooser.getSelected());
    }
}
